{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","signInWithGoogle","a","provider","GoogleAuthProvider","signInWithPopup","console","log","className","onClick","SignOut","currentUser","signOut","ChatRoom","useState","formValue","setFormValue","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","dummy","useRef","sendMessage","e","preventDefault","uid","photoURL","displayName","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","message","id","ref","onSubmit","required","value","onChange","target","tupe","ChatMessage","props","messageClass","src","App","useAuthState","user","clasName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAQAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAErBC,EAAS,WACb,IAAMC,EAAgB,uCAAG,4BAAAC,EAAA,6DACjBC,EAAW,IAAId,IAASS,KAAKM,mBADZ,kBAGfN,EAAKO,gBAAgBF,GAHN,sDAKrBG,QAAQC,IAAR,MALqB,wDAAH,qDAQtB,OACE,wBAAQC,UAAU,UAAUC,QAASR,EAArC,0CAMES,EAAU,WACd,OACEZ,EAAKa,aAAe,wBAAQF,QAAS,kBAAMX,EAAKc,WAA5B,uBAIlBC,EAAW,WACf,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAclB,EAAUmB,WAAW,QAEnCC,EAAQF,EAAYG,QAAQ,aAAaC,YAAY,IAE3D,EAAmBC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAAP,oBACAlB,QAAQC,IAAIiB,GACZ,IAAMC,EAAQC,mBAERC,EAAW,uCAAG,WAAOC,GAAP,qBAAA1B,EAAA,6DAClB0B,EAAEC,iBADgB,EAEqB/B,EAAKa,YAApCmB,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAAUC,EAFL,EAEKA,YAFL,SAGZf,EAAYgB,IAAI,CACpBC,KAAMnB,EACNoB,UAAW9C,IAASU,UAAUqC,WAAWC,kBACzCP,MACAC,WACAC,gBARgB,OAUlBhB,EAAa,IACbS,EAAMa,QAAQC,eAAe,CAAEC,SAAU,WAXvB,2CAAH,sDAajB,OACE,qCACE,iCACGhB,GACCA,EAASiB,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,CAA0BC,QAASD,GAAjBA,EAAIE,OAC9C,sBAAMC,IAAKpB,OAEb,uBAAMqB,SAAUnB,EAAhB,UACE,uBACEoB,UAAQ,EACRC,MAAOjC,EACPkC,SAAU,SAACrB,GAAD,OAAOZ,EAAaY,EAAEsB,OAAOF,UAEzC,wBAAQG,KAAK,SAAb,yBAMFC,EAAc,SAACC,GACnB,MAA6CA,EAAMV,QAA3CT,EAAR,EAAQA,KAAMJ,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SAEbuB,GAFN,EAA6BtB,YAERF,IAAQhC,EAAKa,YAAYmB,IAAM,OAAS,YAChDzC,IAASS,OAAOa,YAE7B,OADAL,QAAQC,IAAIT,EAAKa,YAAYqB,aAE3B,sBAAKxB,UAAS,kBAAa8C,GAA3B,UACE,qBAAKC,IAAKxB,IACV,4BACGG,QAoBMsB,EAbH,WACV,MAAeC,YAAa3D,GAArB4D,EAAP,oBACA,OACE,sBAAKlD,UAAU,MAAf,UACE,yBAAQA,UAAU,WAAlB,UACE,oBAAIA,UAAU,OAAd,kDACA,mBAAGmD,SAAS,UAAZ,mCACA,cAAC,EAAD,OAEF,yBAASnD,UAAU,OAAnB,SAA2BkD,EAAO,cAAC,EAAD,IAAe,cAAC,EAAD,UCnGxCE,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1968639.chunk.js","sourcesContent":["import React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport { useState, useRef } from \"react\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyC8EiM6X7A2LTXdq00rDQ9Jak8sfZtrSAg\",\n  authDomain: \"chat-room-react-b256d.firebaseapp.com\",\n  projectId: \"chat-room-react-b256d\",\n  storageBucket: \"chat-room-react-b256d.appspot.com\",\n  messagingSenderId: \"672174267004\",\n  appId: \"1:672174267004:web:9515028e7c15cd7adac7f9\",\n  measurementId: \"G-K3LL5ZGLLC\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nconst SignIn = () => {\n  const signInWithGoogle = async () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    try {\n      await auth.signInWithPopup(provider);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <button className=\"sign-in\" onClick={signInWithGoogle}>\n      Sign in with Google Account\n    </button>\n  );\n};\n\nconst SignOut = () => {\n  return (\n    auth.currentUser && <button onClick={() => auth.signOut()}>Sign Out</button>\n  );\n};\n\nconst ChatRoom = () => {\n  const [formValue, setFormValue] = useState(\"\");\n  const messagesRef = firestore.collection(\"bros\");\n  //make a query to the database, order by the time create, and limit the number to 25\n  const query = messagesRef.orderBy(\"createdAt\").limitToLast(25);\n  //listen to the database and react to changes\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n  console.log(messages);\n  const dummy = useRef();\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const { uid, photoURL, displayName } = auth.currentUser;\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      displayName,\n    });\n    setFormValue(\"\");\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input\n          required\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n        />\n        <button tupe=\"submit\">Send</button>\n      </form>\n    </>\n  );\n};\n\nconst ChatMessage = (props) => {\n  const { text, uid, photoURL, displayName } = props.message;\n  //check if the message id is the same as the user id\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n  const user = firebase.auth().currentUser;\n  console.log(auth.currentUser.displayName);\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>\n        {text}\n        {/* {messageClass}\n        {displayName} */}\n      </p>\n    </div>\n  );\n};\nconst App = () => {\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header className=\"sign-out\">\n        <h1 className=\"icon\">‚öõÔ∏èüî•üí¨</h1>\n        <p clasName=\"welcome\">Kien Tran's Chat Room</p>\n        <SignOut />\n      </header>\n      <section className=\"main\">{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./css/style.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}